import type { SchemaOptions } from '@sinclair/typebox/build/esm/type/schema';
import type { Ensure, Evaluate } from '@sinclair/typebox/build/esm/type/helpers';
import type { TProperties } from '@sinclair/typebox/build/esm/type/object';
import { type TMappedResult } from '@sinclair/typebox/build/esm/type/mapped';
import { type TRequired } from '@sinclair/typebox/build/esm/type/required/required.js';
type TFromProperties<P extends TProperties> = ({
    [K2 in keyof P]: TRequired<P[K2]>;
});
type TFromMappedResult<R extends TMappedResult> = (Evaluate<TFromProperties<R['properties']>>);
export type TRequiredFromMappedResult<R extends TMappedResult, P extends TProperties = TFromMappedResult<R>> = (Ensure<TMappedResult<P>>);
export declare function RequiredFromMappedResult<R extends TMappedResult, P extends TProperties = TFromMappedResult<R>>(R: R, options?: SchemaOptions): TMappedResult<P>;
export {};
