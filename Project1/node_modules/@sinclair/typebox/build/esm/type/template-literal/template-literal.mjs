import { CreateType } from '@sinclair/typebox/build/esm/type/create/type.mjs';
import { TemplateLiteralSyntax } from '@sinclair/typebox/build/esm/type/template-literal/syntax.mjs';
import { TemplateLiteralPattern } from '@sinclair/typebox/build/esm/type/template-literal/pattern.mjs';
import { IsString } from '@sinclair/typebox/build/esm/type/guard/value.mjs';
import { Kind } from '@sinclair/typebox/build/esm/type/symbols/index.mjs';
/** `[Json]` Creates a TemplateLiteral type */
// prettier-ignore
export function TemplateLiteral(unresolved, options) {
    const pattern = IsString(unresolved)
        ? TemplateLiteralPattern(TemplateLiteralSyntax(unresolved))
        : TemplateLiteralPattern(unresolved);
    return CreateType({ [Kind]: 'TemplateLiteral', type: 'string', pattern }, options);
}
