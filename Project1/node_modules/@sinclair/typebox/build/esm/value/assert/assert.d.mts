import { ValueErrorIterator, ValueError } from '@sinclair/typebox/build/esm/errors';
import { TypeBoxError } from '@sinclair/typebox/build/esm/type/error/error.js';
import { TSchema } from '@sinclair/typebox/build/esm/type/schema';
import { Static } from '@sinclair/typebox/build/esm/type/static';
export declare class AssertError extends TypeBoxError {
    #private;
    error: ValueError | undefined;
    constructor(iterator: ValueErrorIterator);
    /** Returns an iterator for each error in this value. */
    Errors(): ValueErrorIterator;
}
/** Asserts a value matches the given type or throws an `AssertError` if invalid */
export declare function Assert<T extends TSchema>(schema: T, references: TSchema[], value: unknown): asserts value is Static<T>;
/** Asserts a value matches the given type or throws an `AssertError` if invalid */
export declare function Assert<T extends TSchema>(schema: T, value: unknown): asserts value is Static<T>;
